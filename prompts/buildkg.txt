
***IMPORTANT***
NOTE:
Write the source for each data point, extract from the INPUT TEXT a few lines which is used to fill the json format.


You are an expert disaster information extraction engine. Your job is to read the input disaster report and extract a structured data. You MUST follow the exact format and output only a single valid Python dictionary called `data`.

---

## ✅ OBJECTIVE:
From the provided disaster report (any unstructured text), extract **only relevant factual data** and convert it into a standardized, and parseable dictionary.

---

## ✅ OUTPUT FORMAT:

Your output must ONLY be this Python dictionary:

data =  {{
    'coordinates': '<latitude,longitude>',
    'country': '<country name>',
    'region': '<region name>',
    'climate_zone': '<climate classification>',
    'terrain_type': '<e.g., Urban, Mountainous, Coastal>',
    'causes': '<comma-separated causes>',
    'occurrence': {{
        'frequency': '<e.g., rare, frequent>',
        'magnitude': '<e.g., 7.8>',
        'trigger': '<e.g., tectonic plate movement>',
        'seasonality': '<e.g., monsoon, winter, year-round>'
    }},
    'hazard_characteristics': {{
        'hazard_subtypes': '<comma-separated subtypes>',
        'intensity_metrics': '<e.g., Richter 7.8, Mercalli IX>',
        'spatial_extent': '<affected area size>',
        'duration': '<e.g., 48 hours>',
        'seasonal_patterns': '<e.g., year-round>',
        'predictability': '<e.g., Low due to seismic uncertainty>'
    }},
    'environmental_impacts': {{
        'biodiversity_loss': '<description>',
        'ecosystem_disruption': '<description>',
        'soil_degradation': '<description>',
        'water_contamination': '<description>',
        'air_quality_impact': '<description>',
        'carbon_footprint': '<numerical value or description>'
    }},
    'societal_impacts': {{
        'education_disruption': '<description>',
        'employment_impact': '<number or description>',
        'community_resilience': '<description>',
        'cultural_heritage_damage': '<description>',
        'public_sentiment': '<description>',
        'displacement_patterns': '<description>'
    }},
    'economic_details': {{
        'indirect_economic_losses': '<value>',
        'reconstruction_costs': '<value>',
        'insurance_penetration': '<percentage>',
        'relief_funding_sources': '<comma-separated sources>',
        'economic_recovery_indicators': '<description>'
    }},
    'response_enhancements': {{
        'response_timelines': '<description>',
        'volunteer_involvement': '<number>',
        'logistical_challenges': '<description>',
        'shelter_capacity': '<number>',
        'post_event_policies': '<description>',
        'technology_used': '<description>'
    }},
    'health_details': {{
        'vaccination_campaigns': '<description>',
        'mental_health_programs': '<description>',
        'healthcare_access': '<description>',
        'infectious_disease_spread': '<e.g., R0 of 1.5>',
        'nutrition_impacts': '<description>',
        'medical_supply_shortages': '<description>'
    }},
    'infrastructure_utilities': {{
        'power_outages': '<description>',
        'water_supply_impact': '<description>',
        'transportation_networks': '<description>',
        'telecommunications_recovery': '<description>',
        'critical_facilities': '<description>',
        'building_damage_assessment': '<percentage or description>'
    }},
    'scientific_data': {{
        'precursor_events': '<description>',
        'real_time_monitoring': '<description>',
        'post_event_analysis': '<description>',
        'climate_data_integration': '<description>',
        'geological_changes': '<description>',
        'hazard_modeling': '<description>'
    }},
    'policy_governance': {{
        'government_response_levels': '<description>',
        'international_treaties': '<description>',
        'community_feedback_mechanisms': '<description>',
        'regulatory_gaps': '<description>',
        'cross_border_impacts': '<description>',
        'legal_actions': '<description>'
    }},
    'technology_innovation': {{
        'ai_tech_interventions': '<description>',
        'remote_sensing_data': '<description>',
        'crowdsourced_data': '<description>',
        'smart_infrastructure': '<description>',
        'data_sharing_platforms': '<description>',
        'innovative_solutions': '<description>'
    }},
    'historical_context': {{
        'historical_comparisons': '<description>',
        'recurrence_intervals': '<description>',
        'lessons_learned': '<description>',
        'historical_damage_records': '<description>',
        'cultural_memory': '<description>',
        'archival_data': '<description>'
    }},
    'community_engagement': {{
        'local_leadership_involvement': '<description>',
        'ngo_contributions': '<description>',
        'private_sector_role': '<description>',
        'citizen_initiatives': '<description>',
        'media_coverage': '<description>',
        'public_awareness_campaigns': '<description>'
    }},
    'effects': {{
        'property': '<value>',
        'death': '<value>',
        'displacement': '<value>',
        'affected_population': '<value>',
        'economy': '<value>',
        'infrastructure': '<description>',
        'environment': '<description>',
        'disease': '<description>',
        'injuries': '<value>',
        'mental_health': '<description>',
        'food_security': '<description>'
    }},
    'after_effects': {{
        'property': '<value>',
        'death': '<value>',
        'displacement': '<value>',
        'affected_population': '<value>',
        'economy': '<value>',
        'infrastructure': '<description>',
        'environment': '<description>',
        'disease': '<description>',
        'injuries': '<value>',
        'mental_health': '<description>',
        'food_security': '<description>'
    }},
    'responses': '<comma-separated responses>',
    'countries_aiding': '<comma-separated country names>',
    'response_agencies': '<comma-separated agency names>',
    'severity': '<e.g., Low, Medium, High>',
    'warning_issued': <True/False>,
    'warning_level': '<e.g., Yellow, Red>',
    'economic_cost_currency': '<currency, e.g., USD>',
    'environmental_conditions': {{
        'weather': '<description>',
        'temperature': '<number>',
        'wind_speed': '<number>',
        'precipitation_type': '<e.g., rain, snow>',
        'precipitation_amount': '<number>'
    }},
    'demographic_impacts': {{
        'age_groups': '<comma-separated age groups>',
        'gender_distribution': '<description>',
        'vulnerable_populations': '<description>'
    }},
    'infrastructure_details': '<comma-separated infrastructure types>',
    'mitigation_measures': '<comma-separated measures>',
    'economic_sectors_affected': '<comma-separated sectors>',
    'health_impacts': {{
        'specific_diseases': '<comma-separated diseases>',
        'mental_health_issues': '<comma-separated issues>',
        'medical_resources_needed': '<comma-separated resources>'
    }},
    'relief_efforts': {{
        'funding_amount': '<value>',
        'aid_types': '<comma-separated aid types>',
        'international_organizations': '<comma-separated names>',
        'donor_contributions': '<description>'
    }},
    'long_term_impacts': {{
        'recovery_timeline': '<description>',
        'social_disruption': '<description>',
        'cultural_impacts': '<description>'
    }},
    'hazard_classification': {{
        'primary_hazard': '<main hazard>',
        'secondary_hazards': '<comma-separated secondary hazards>',
        'recurrence_probability': '<numeric probability>'
    }},
    'communication_systems': '<description>',
    'evacuation_details': {{
        'evacuees': '<value>',
        'evacuation_routes': '<comma-separated routes>',
        'shelters': '<comma-separated shelter types>'
    }},
    'insurance_coverage': {{
        'insured_losses': '<value>',
        'coverage_details': '<description>'
    }},
    'scientific_observations': {{
        'seismic_activity': '<magnitude>',
        'wind_speed': '<number>',
        'rainfall_rate': '<number>',
        'observation_notes': '<description>'
    }}
}}

---

## ✅ EXTRACTION RULES:

1. **Concise but keep all information**: Keep each field as SHORT and DENSE as possible. Avoid repetition or full sentences.
   - ✅ Yes: `"1000 buildings destroyed"`
   - ❌ No: `"There were 1000 buildings that were destroyed"`

2. **Field Requirements**:
   - All fields **must be included**.
   - If any value is unknown or missing, set:
     - Strings → `"NaN"`
     - Numbers → `0.0` (for economy), `"NaN"` (for displacement)

3. **Value Constraints**:
   - `economy`: Must always be a `float`. If monetary loss is given as a string, convert to float. Use 0.0 if absent.
   - `displacement`: Must be an `int` if count is known, else `"NaN"`.
   - `coordinates`: A list of two floats — latitude and longitude. If missing, default to `[0.0, 0.0]`.

4. **Field Clarity**:
   - `property`: Building or asset damage.
   - `disease`: Epidemics or outbreaks (e.g., malaria, cholera).
   - `death`: Death toll with brief cause.
   - `economy`: Economic loss in numeric form (USD or other).
   - `infrastructure`: Roads, bridges, utilities.
   - `environment`: Pollution, contamination, spills.
   - `displacement`: People rendered homeless or relocated.
   - `after_effects`: Post-disaster developments of above fields.
   - `responses`: Brief list of organized actions (rescue, aid, etc.).
   - `coordinates`: Disaster location in [latitude, longitude].

5. **No Extra Output**:
   - Only output the `data = {{...}}` Python dictionary.
   - Do not add comments, markdown, headings, explanations, or any other text.
   - Must be valid Python — parsable and copy-paste-ready.

---

## ✅ INPUT TEXT:

\"\"\"
{inputStr}
\"\"\"

Now extract structured `data` from the above text.

REMEMBER:
- Be complete, even if it takes few lines.
- Do not hallucinate.
- Only output the `data = {{...}}` dictionary, formatted correctly.
"""